component: local_test

## Human readable name of the plugin.
name: Example plugin

## Human readable release number.
release: "0.1.0"

## Plugin version number, e.g. 2016062100. Will be set to current date if left empty.
#version: 2016121200

## Required Moodle version, e.g. 2015051100 or "2.9".
requires: "2.9"

## Plugin maturity level. Possible options are MATURIY_ALPHA, MATURITY_BETA,
## MATURITY_RC or MATURIY_STABLE.
maturity: MATURITY_BETA

## Copyright holder(s) of the generated files and classes.
copyright: 2016 Alexandru Elisei <alexandru.elisei@gmail.com>, David Mudr√°k <david@moodle.com>

## If the plugin depends on other plugins, declare the dependencies.
dependencies:
  - plugin: mod_forum
    version: ANY_VERSION
  - plugin: tool_another
    version: 2016121200

## Features flags can control generation of optional files/code fragments.
features:
  readme: true
  license: true
  settings: true

  ## The db/upgrade.php file will be generated. Upgrade steps are defined in
  ## this file.
  upgrade: true

  install: true
  uninstall: true

## The file db/upgradelib.php will also be generated.
upgrade:
    upgradelib: true

## PHPUnit test classes.
phpunit_tests:
    ## The class will be defined in the file tests/firstclass_test.php
    ## The full class name will be local_test_firstclass_testcase.
    - firstclass
    - secondclass

    ## This is valid too.
    - local_test_thirdclass_testcase

## Capabilities defined by the plugin.
capabilities:
  - name: viewsomething
    captype: view
    contextlevel: CONTEXT_MODULE
    archetypes:
      - role: student
        permission: CAP_ALLOW
      - role: editingteacher
        permission: CAP_ALLOW
    clonepermissionsfrom: moodle/course:view
  - name: editsomething
    captype: write

## Message producers to be used with the Message API.
message_providers:
    - name: submission
      capability: mod/quiz:emailnotifysubmission
    - name: notification

## Creates the cli script files cli/firstfilename.php and cli/seconfilename.php.
cli_script:
   - firstfilename
   - secondfilename

## Register observers for events.
observers:
  - eventname: \core\event\something_happened
    ## The callback creates the file classes/observer_one.php. The namespace
    ## for the file is 'local_test'.
    callback: \local_test\another\observer_one::something_happened
    includefile: "/path/to/file/relative/to/moodle/dir/root"
    priority: 200

  - eventname: \core\event\something_else_happened
    ## The callback creates the function in locallib.php.
    callback: local_test_locallib_function

  - eventname: \core\event\something_else_happened
    ## This callback creates the class 'local_test_observer_two' in the file
    ## classes/observer_two.php. The class is created in the global namespace.
    callback: local_test_observer_two::do_something

## Creates event classes. The first class, located at
## classes/event/first_event.php, will extend the base class
## \core\event\first_event and the second class will be located at
## classes/event/second_event.php.
events:
    - eventname: first_event
      extends: \core\event\first_event
    - eventname: second_event

## Creates a list of mobile remote addons at db/mobile.php.
mobile_addons:
    - name: 'my_first_addon'
      dependencies:
          - dependency_one
          - dependency_two
    - name: 'my_second_mine'

## Explicitly added strings
strings:
  - id: mycustomstring
    text: You can add 'extra' strings via the recipe file.
  - id: mycustomstring2
    text: Another string with {$a->some} placeholder.

## Explicitly added contents, such as files not covered by the generator logic.
##
## Not yet implemented.
##
#extra:
#  files:
#    - path: mycustomfile.php
#      skel: php
#      description: Explicitly generated PHP file.
